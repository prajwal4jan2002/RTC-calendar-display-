#include "st7735.h"
#include "main.h"

extern SPI_HandleTypeDef hspi1;

// GPIO macros
#define TFT_CS_LOW()     HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_RESET)
#define TFT_CS_HIGH()    HAL_GPIO_WritePin(TFT_CS_PORT, TFT_CS_PIN, GPIO_PIN_SET)
#define TFT_DC_LOW()     HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_RESET)
#define TFT_DC_HIGH()    HAL_GPIO_WritePin(TFT_DC_PORT, TFT_DC_PIN, GPIO_PIN_SET)
#define TFT_RST_LOW()    HAL_GPIO_WritePin(TFT_RST_PORT, TFT_RST_PIN, GPIO_PIN_RESET)
#define TFT_RST_HIGH()   HAL_GPIO_WritePin(TFT_RST_PORT, TFT_RST_PIN, GPIO_PIN_SET)

// Send command
void ST7735_WriteCommand(uint8_t cmd)
{
    TFT_DC_LOW();
    TFT_CS_LOW();
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
    TFT_CS_HIGH();
}

// Send data
void ST7735_WriteData(uint8_t* buff, size_t size)
{
    TFT_DC_HIGH();
    TFT_CS_LOW();
    HAL_SPI_Transmit(&hspi1, buff, size, HAL_MAX_DELAY);
    TFT_CS_HIGH();
}

// Draw pixel
void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
    uint8_t data[2] = { color >> 8, color & 0xFF };

    ST7735_WriteCommand(0x2A); // Column
    uint8_t colData[] = { x >> 8, x & 0xFF, x >> 8, x & 0xFF };
    ST7735_WriteData(colData, 4);

    ST7735_WriteCommand(0x2B); // Row
    uint8_t rowData[] = { y >> 8, y & 0xFF, y >> 8, y & 0xFF };
    ST7735_WriteData(rowData, 4);

    ST7735_WriteCommand(0x2C); // RAM write
    ST7735_WriteData(data, 2);
}

void ST7735_DrawChar(uint16_t x, uint16_t y, char ch, const FontDef_t *font,
                     uint16_t color, uint16_t bgcolor)
{
    // Ensure valid ASCII range (printable chars)
    if (ch < 32 || ch > 126)
        ch = '?';

    // Each character uses 'font->FontHeight' bytes in your table
    const uint8_t *bitmap = &font->data[(ch - 32) * font->FontHeight];




    for (uint8_t row = 0; row < font->FontHeight; row++)
    {
        uint8_t line = bitmap[row];

        for (uint8_t col = 0; col < font->FontWidth; col++)
        {
            if (line & (1 << (font->FontWidth - 1 - col)))
                ST7735_DrawPixel(x + col, y + row, color);
            else
                ST7735_DrawPixel(x + col, y + row, bgcolor);
        }
    }
}



/*void ST7735_DrawChar(uint16_t x, uint16_t y, char ch, const FontDef_t *font,
                     uint16_t color, uint16_t bgcolor)
{
    // If the character is not printable, replace it with '?'
    if (ch < 32 || ch > 126)
        ch = '?';

    // Each character has FontHeight bytes in the table
    const uint8_t *bitmap = &font->data[(ch - 32) * font->FontHeight];

    // Draw each pixel row
    for (uint8_t row = 0; row < font->FontHeight; row++) {
        uint8_t line = bitmap[row];

        // Draw each column in the row
        for (uint8_t col = 0; col < font->FontWidth; col++) {
            if (line & (1 << (font->FontWidth - 1 - col)))
                ST7735_DrawPixel(x + col, y + row, color);
            else
                ST7735_DrawPixel(x + col, y + row, bgcolor);
        }
    }
}*/


// Draw string
void ST7735_WriteString(uint16_t x, uint16_t y, const char *str, const FontDef_t *font, uint16_t color, uint16_t bgcolor)
{
    while(*str)
    {
        ST7735_DrawChar(x,y,*str,font,color,bgcolor);
        x += font->FontWidth+1;
        str++;
    }
}

// Fill screen
void ST7735_FillScreen(uint16_t color)
{
    for(uint16_t y=0;y<160;y++)
        for(uint16_t x=0;x<128;x++)
            ST7735_DrawPixel(x,y,color);
}

// Initialize ST7735
void ST7735_Init(void)
{
    TFT_RST_LOW();
    HAL_Delay(50);
    TFT_RST_HIGH();
    HAL_Delay(50);

    // Full init sequence
    ST7735_WriteCommand(0x01); // Software reset
    HAL_Delay(150);
    ST7735_WriteCommand(0x11); // Sleep out
    HAL_Delay(500);
    ST7735_WriteCommand(0x3A); // Set color mode
    uint8_t colorMode = 0x05;   // 16-bit color
    ST7735_WriteData(&colorMode,1);
    ST7735_WriteCommand(0x29); // Display on
}
